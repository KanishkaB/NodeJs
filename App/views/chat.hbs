<!DOCTYPE html>
<html>
<head>
    <title>Chat</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f0f2f5;
        }
        .chat-container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        .chat-header h1 {
            margin: 0;
            color: #1a73e8;
            font-size: 24px;
        }
        .messages {
            height: 500px;
            overflow-y: auto;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 12px;
            margin-bottom: 20px;
        }
        .message {
            margin: 8px 0;
            padding: 10px 15px;
            border-radius: 15px;
            max-width: 70%;
            position: relative;
        }
        .message-content {
            margin-bottom: 4px;
        }
        .message-timestamp {
            font-size: 11px;
            opacity: 0.7;
            margin-top: 4px;
        }
        .user-message {
            background: #1a73e8;
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }
        .user-message .message-timestamp {
            color: rgba(255,255,255,0.8);
            text-align: right;
        }
        .bot-message {
            background: #e9ecef;
            color: #212529;
            border-bottom-left-radius: 5px;
        }
        .bot-message .message-timestamp {
            color: #666;
        }
        .typing-indicator {
            padding: 10px;
            font-size: 14px;
            color: #666;
            font-style: italic;
            height: 20px;
        }
        .typing-indicator .dots {
            display: inline-block;
        }
        .typing-indicator .dots span {
            display: inline-block;
            width: 6px;
            height: 6px;
            background: #666;
            border-radius: 50%;
            margin: 0 2px;
            animation: typing 1.4s infinite;
        }
        .typing-indicator .dots span:nth-child(2) { animation-delay: 0.2s; }
        .typing-indicator .dots span:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typing {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-4px); }
        }
        .input-container {
            display: flex;
            gap: 10px;
            background: white;
            padding: 15px;
            border-radius: 12px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        }
        #message-input {
            flex: 1;
            padding: 12px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 25px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }
        #message-input:focus {
            outline: none;
            border-color: #1a73e8;
        }
        button {
            padding: 12px 24px;
            background: #1a73e8;
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 500;
            transition: background 0.3s ease;
        }
        button:hover {
            background: #1557b0;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h1>AI Chat Assistant</h1>
            <div class="user-info">
                Welcome back!
            </div>
        </div>
        <div class="messages" id="messages"></div>
        <div class="typing-indicator" id="typing-indicator">
            <span class="dots">
                <span></span>
                <span></span>
                <span></span>
            </span>
        </div>
        <div class="input-container">
            <input type="text" id="message-input" placeholder="Type your message...">
            <button onclick="sendMessage()">Send</button>
        </div>
        <div id="bot-response">
            {{botResponse}}
        </div>
    </div>

    <script>
        const socket = io();
        const messagesDiv = document.getElementById('messages');
        const messageInput = document.getElementById('message-input');
        const typingIndicator = document.getElementById('typing-indicator');
        let typingTimeout;

        // Hide typing indicator initially
        typingIndicator.style.display = 'none';

        function formatTimestamp(date) {
            return date.toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit'
            });
        }

        function appendMessage(message, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            contentDiv.textContent = message;
            
            const timestampDiv = document.createElement('div');
            timestampDiv.className = 'message-timestamp';
            timestampDiv.textContent = formatTimestamp(new Date());
            
            messageDiv.appendChild(contentDiv);
            messageDiv.appendChild(timestampDiv);
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function showTypingIndicator() {
            typingIndicator.style.display = 'block';
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function hideTypingIndicator() {
            typingIndicator.style.display = 'none';
        }

        async function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                appendMessage(message, true);

                // Call Purview API
                try {
                    const response = await fetch('/chat/send', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message }),
                    });
                    const data = await response.json();
                    if (data.success) {
                        appendMessage(data.botResponse, false);
                    } else {
                        console.error('Purview API Error:', data.error);
                    }
                } catch (error) {
                    console.error('Error calling Purview API:', error);
                }

                // Clear input
                messageInput.value = '';
            }
        }

        // Handle Enter key
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Handle input for typing indicator
        messageInput.addEventListener('input', () => {
            socket.emit('typing');
        });

        // Listen for messages from server
        socket.on('chat message', (msg) => {
            hideTypingIndicator();
            if (typeof msg === 'string' && msg.startsWith('Bot:')) {
                appendMessage(msg.substring(4).trim(), false);
            }
        });

        // Handle connection
        socket.on('connect', () => {
            console.log('Connected to server');
        });

        // Handle disconnection
        socket.on('disconnect', () => {
            console.log('Disconnected from server');
        });

        // Handle typing from other users
        socket.on('user typing', () => {
            showTypingIndicator();
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(hideTypingIndicator, 3000);
        });
    </script>
</body>
</html>